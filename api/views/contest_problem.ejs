{% extends 'contest_layout.html' %}
{% block content %}
<h1>
    {{problem_name}}
</h1>
<div class="problem-limits">
    <a class="limits" href="javascript:void(0)">Limits: 1s, 512MB</a>
</div>
<div class="text-container extra-dark-bg padding-1">
    <div class="margin-1">
        <button class="cb-btn btn-dark margin-1 current">Problem</button>
        <button class="cb-btn btn-dark margin-1">Editorial</button>
        <button class="cb-btn btn-dark margin-1">Discussion</button>
        <button class="cb-btn btn-dark margin-1">My Submissions</button>
    </div>
    <div class="padding-1">
        <div class="extra-dark-bg padding-1">
            <h3>tHe cReAtoR oF tHiS pRoBlEm Is UpSeT rIgHt nOw.</h3>
            <p>So he'll not make this prompt annoyingly long!</p>
            <p>Your task is to make a sentence given in input to look like the first line.</p>
            <p>The size of the sentence will not be longer than 40000.</p>
        </div>
        <div class="extra-dark-bg padding-1">
            <h3>Input Format</h3>
            <p>The input will contain a line of string S.</p>
        </div>
        <div class="extra-dark-bg padding-1">
            <h3>Output Format</h3>
            <p>The output will contain a line of string containing the result.</p>
        </div>
        <div class="extra-dark-bg padding-1">
            <h3>
                Constrains
            </h3>
            <p>A string S whose size won't be larger than 40000 <code>(1 <= |S| <= 40000)</code>.</p>
        </div>
    </div>
    <div class="extra-dark-bg padding-1 margin-1">
        <h1>Sample 1</h1>
        <div class="sample-container">
            <div class="sample-input">
                <span class="sample-title">Input</span>
                <p>the creator of this problem is upset right now.</p>
            </div>
            <div class="sample-output">
                <span class="sample-title">
                    Output
                </span>
                <p>tHe cReAtoR oF tHiS pRoBlEm Is UpSeT rIgHt nOw.</p>
            </div>
        </div>
    </div>
</div>
<div class="code-editor-container">
<div class="code-editor-header">
    <select class="languages-dropdown" name="state" style="width: 200px;">
        <option value="Bash">Bash</option>
        <option value="C">C</option>
        <option value="C++">C++</option>
        <option value="C#">C#</option>
        <option value="Java">Java</option>
        <option value="Javascript">Javascript</option>
        <option value="Python 3">Python 3</option>
        <option value="Python 2">Python 2</option>
        <option value="Ruby">Ruby</option>
    </select>
</div>
<div class="editor" id="container"></div>
<div class="code-editor-footer" align="right">
    <button class="cb-btn margin-5px">Run Code</button>
    <button class="cb-btn margin-5px">Custom Testcase</button>
    <button class="cb-btn margin-5px">Submit Code</button>
</div>
</div>
<script>

//Dropdown
$(document).ready(function() {
$('.languages-dropdown').select2();
});

//Script for code editor
require.config({ paths: { 'vs': 'https://unpkg.com/monaco-editor@latest/min/vs' }});
window.MonacoEnvironment = { getWorkerUrl: () => proxy };

let proxy = URL.createObjectURL(new Blob([`
self.MonacoEnvironment = {
    baseUrl: 'https://unpkg.com/monaco-editor@latest/min/'
};
importScripts('https://unpkg.com/monaco-editor@latest/min/vs/base/worker/workerMain.js');
`], { type: 'text/javascript' }));

require(["vs/editor/editor.main"], function () {
let editor = monaco.editor.create(document.getElementById('container'), {
    value: [
        'function x() {',
        '\tconsole.log("Hello world!");',
        '}'
    ].join('\n'),
    language: 'javascript',
    theme: 'vs-dark',
    automaticLayout: true,
});
});
</script>
{% endblock content %}